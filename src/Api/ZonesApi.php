<?php
/**
 * ZonesApi
 * PHP version 5
 *
 * @category Class
 * @package  insidieux\PowerDnsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerDNS Authoritative HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.13
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace insidieux\PowerDnsClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use insidieux\PowerDnsClient\ApiException;
use insidieux\PowerDnsClient\Configuration;
use insidieux\PowerDnsClient\HeaderSelector;
use insidieux\PowerDnsClient\ObjectSerializer;

/**
 * ZonesApi Class Doc Comment
 *
 * @category Class
 * @package  insidieux\PowerDnsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZonesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $configuration;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->configuration = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfiguration()
    {
        return $this->configuration;
    }

    /**
     * Operation axfrExportZone
     *
     * Returns the zone in AXFR format.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function axfrExportZone($serverId, $zoneId)
    {
        list($response) = $this->axfrExportZoneWithHttpInfo($serverId, $zoneId);
        return $response;
    }

    /**
     * Operation axfrExportZoneWithHttpInfo
     *
     * Returns the zone in AXFR format.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function axfrExportZoneWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->axfrExportZoneRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation axfrExportZoneAsync
     *
     * Returns the zone in AXFR format.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function axfrExportZoneAsync($serverId, $zoneId)
    {
        return $this->axfrExportZoneAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation axfrExportZoneAsyncWithHttpInfo
     *
     * Returns the zone in AXFR format.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function axfrExportZoneAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = 'string';
        $request = $this->axfrExportZoneRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'axfrExportZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function axfrExportZoneRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling axfrExportZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling axfrExportZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation axfrRetrieveZone
     *
     * Retrieve slave zone from its master.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function axfrRetrieveZone($serverId, $zoneId)
    {
        $this->axfrRetrieveZoneWithHttpInfo($serverId, $zoneId);
    }

    /**
     * Operation axfrRetrieveZoneWithHttpInfo
     *
     * Retrieve slave zone from its master.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function axfrRetrieveZoneWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->axfrRetrieveZoneRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation axfrRetrieveZoneAsync
     *
     * Retrieve slave zone from its master.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function axfrRetrieveZoneAsync($serverId, $zoneId)
    {
        return $this->axfrRetrieveZoneAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation axfrRetrieveZoneAsyncWithHttpInfo
     *
     * Retrieve slave zone from its master.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function axfrRetrieveZoneAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = '';
        $request = $this->axfrRetrieveZoneRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'axfrRetrieveZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function axfrRetrieveZoneRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling axfrRetrieveZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling axfrRetrieveZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/axfr-retrieve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkZone
     *
     * Verify zone contents/configuration.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function checkZone($serverId, $zoneId)
    {
        list($response) = $this->checkZoneWithHttpInfo($serverId, $zoneId);
        return $response;
    }

    /**
     * Operation checkZoneWithHttpInfo
     *
     * Verify zone contents/configuration.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkZoneWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->checkZoneRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkZoneAsync
     *
     * Verify zone contents/configuration.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkZoneAsync($serverId, $zoneId)
    {
        return $this->checkZoneAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkZoneAsyncWithHttpInfo
     *
     * Verify zone contents/configuration.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkZoneAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = 'string';
        $request = $this->checkZoneRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkZoneRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling checkZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling checkZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createZone
     *
     * Creates a new domain, returns the Zone on creation.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     * @param  bool $rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \insidieux\PowerDnsClient\Model\Zone
     */
    public function createZone($serverId, $zone, $rrsets = true)
    {
        list($response) = $this->createZoneWithHttpInfo($serverId, $zone, $rrsets);
        return $response;
    }

    /**
     * Operation createZoneWithHttpInfo
     *
     * Creates a new domain, returns the Zone on creation.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     * @param  bool $rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \insidieux\PowerDnsClient\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     */
    public function createZoneWithHttpInfo($serverId, $zone, $rrsets = true)
    {
        $request = $this->createZoneRequest($serverId, $zone, $rrsets);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\insidieux\PowerDnsClient\Model\Zone' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\insidieux\PowerDnsClient\Model\Zone', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\insidieux\PowerDnsClient\Model\Zone';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\insidieux\PowerDnsClient\Model\Zone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZoneAsync
     *
     * Creates a new domain, returns the Zone on creation.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     * @param  bool $rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneAsync($serverId, $zone, $rrsets = true)
    {
        return $this->createZoneAsyncWithHttpInfo($serverId, $zone, $rrsets)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createZoneAsyncWithHttpInfo
     *
     * Creates a new domain, returns the Zone on creation.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     * @param  bool $rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneAsyncWithHttpInfo($serverId, $zone, $rrsets = true)
    {
        $returnType = '\insidieux\PowerDnsClient\Model\Zone';
        $request = $this->createZoneRequest($serverId, $zone, $rrsets);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     * @param  bool $rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createZoneRequest($serverId, $zone, $rrsets = true)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling createZone'
            );
        }
        // verify the required parameter 'zone' is set
        if ($zone === null || (is_array($zone) && count($zone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone when calling createZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rrsets !== null) {
            $queryParams['rrsets'] = ObjectSerializer::toQueryValue($rrsets);
        }

        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($zone)) {
            $_tempBody = $zone;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteZone
     *
     * Deletes this zone, all attached metadata and rrsets.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteZone($serverId, $zoneId)
    {
        $this->deleteZoneWithHttpInfo($serverId, $zoneId);
    }

    /**
     * Operation deleteZoneWithHttpInfo
     *
     * Deletes this zone, all attached metadata and rrsets.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteZoneWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->deleteZoneRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteZoneAsync
     *
     * Deletes this zone, all attached metadata and rrsets.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneAsync($serverId, $zoneId)
    {
        return $this->deleteZoneAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteZoneAsyncWithHttpInfo
     *
     * Deletes this zone, all attached metadata and rrsets.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = '';
        $request = $this->deleteZoneRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteZoneRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling deleteZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling deleteZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listZone
     *
     * zone managed by a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \insidieux\PowerDnsClient\Model\Zone
     */
    public function listZone($serverId, $zoneId)
    {
        list($response) = $this->listZoneWithHttpInfo($serverId, $zoneId);
        return $response;
    }

    /**
     * Operation listZoneWithHttpInfo
     *
     * zone managed by a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \insidieux\PowerDnsClient\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     */
    public function listZoneWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->listZoneRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\insidieux\PowerDnsClient\Model\Zone' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\insidieux\PowerDnsClient\Model\Zone', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\insidieux\PowerDnsClient\Model\Zone';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\insidieux\PowerDnsClient\Model\Zone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listZoneAsync
     *
     * zone managed by a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listZoneAsync($serverId, $zoneId)
    {
        return $this->listZoneAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listZoneAsyncWithHttpInfo
     *
     * zone managed by a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listZoneAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = '\insidieux\PowerDnsClient\Model\Zone';
        $request = $this->listZoneRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listZoneRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling listZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling listZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listZones
     *
     * List all Zones in a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists. (optional)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \insidieux\PowerDnsClient\Model\Zone[]
     */
    public function listZones($serverId, $zone = null)
    {
        list($response) = $this->listZonesWithHttpInfo($serverId, $zone);
        return $response;
    }

    /**
     * Operation listZonesWithHttpInfo
     *
     * List all Zones in a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists. (optional)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \insidieux\PowerDnsClient\Model\Zone[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listZonesWithHttpInfo($serverId, $zone = null)
    {
        $request = $this->listZonesRequest($serverId, $zone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\insidieux\PowerDnsClient\Model\Zone[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\insidieux\PowerDnsClient\Model\Zone[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\insidieux\PowerDnsClient\Model\Zone[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\insidieux\PowerDnsClient\Model\Zone[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listZonesAsync
     *
     * List all Zones in a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listZonesAsync($serverId, $zone = null)
    {
        return $this->listZonesAsyncWithHttpInfo($serverId, $zone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listZonesAsyncWithHttpInfo
     *
     * List all Zones in a server
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listZonesAsyncWithHttpInfo($serverId, $zone = null)
    {
        $returnType = '\insidieux\PowerDnsClient\Model\Zone[]';
        $request = $this->listZonesRequest($serverId, $zone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listZones'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zone When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listZonesRequest($serverId, $zone = null)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling listZones'
            );
        }

        $resourcePath = '/servers/{server_id}/zones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($zone !== null) {
            $queryParams['zone'] = ObjectSerializer::toQueryValue($zone);
        }

        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation notifyZone
     *
     * Send a DNS NOTIFY to all slaves.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function notifyZone($serverId, $zoneId)
    {
        $this->notifyZoneWithHttpInfo($serverId, $zoneId);
    }

    /**
     * Operation notifyZoneWithHttpInfo
     *
     * Send a DNS NOTIFY to all slaves.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function notifyZoneWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->notifyZoneRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation notifyZoneAsync
     *
     * Send a DNS NOTIFY to all slaves.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notifyZoneAsync($serverId, $zoneId)
    {
        return $this->notifyZoneAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notifyZoneAsyncWithHttpInfo
     *
     * Send a DNS NOTIFY to all slaves.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notifyZoneAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = '';
        $request = $this->notifyZoneRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notifyZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notifyZoneRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling notifyZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling notifyZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/notify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchZone
     *
     * Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchZone($serverId, $zoneId, $zone)
    {
        $this->patchZoneWithHttpInfo($serverId, $zoneId, $zone);
    }

    /**
     * Operation patchZoneWithHttpInfo
     *
     * Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchZoneWithHttpInfo($serverId, $zoneId, $zone)
    {
        $request = $this->patchZoneRequest($serverId, $zoneId, $zone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation patchZoneAsync
     *
     * Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchZoneAsync($serverId, $zoneId, $zone)
    {
        return $this->patchZoneAsyncWithHttpInfo($serverId, $zoneId, $zone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchZoneAsyncWithHttpInfo
     *
     * Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchZoneAsyncWithHttpInfo($serverId, $zoneId, $zone)
    {
        $returnType = '';
        $request = $this->patchZoneRequest($serverId, $zoneId, $zone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchZoneRequest($serverId, $zoneId, $zone)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling patchZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling patchZone'
            );
        }
        // verify the required parameter 'zone' is set
        if ($zone === null || (is_array($zone) && count($zone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone when calling patchZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($zone)) {
            $_tempBody = $zone;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putZone
     *
     * Modifies basic zone data (metadata).
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putZone($serverId, $zoneId, $zone)
    {
        $this->putZoneWithHttpInfo($serverId, $zoneId, $zone);
    }

    /**
     * Operation putZoneWithHttpInfo
     *
     * Modifies basic zone data (metadata).
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putZoneWithHttpInfo($serverId, $zoneId, $zone)
    {
        $request = $this->putZoneRequest($serverId, $zoneId, $zone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putZoneAsync
     *
     * Modifies basic zone data (metadata).
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putZoneAsync($serverId, $zoneId, $zone)
    {
        return $this->putZoneAsyncWithHttpInfo($serverId, $zoneId, $zone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putZoneAsyncWithHttpInfo
     *
     * Modifies basic zone data (metadata).
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putZoneAsyncWithHttpInfo($serverId, $zoneId, $zone)
    {
        $returnType = '';
        $request = $this->putZoneRequest($serverId, $zoneId, $zone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \insidieux\PowerDnsClient\Model\Zone $zone The zone struct to patch with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putZoneRequest($serverId, $zoneId, $zone)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling putZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling putZone'
            );
        }
        // verify the required parameter 'zone' is set
        if ($zone === null || (is_array($zone) && count($zone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone when calling putZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($zone)) {
            $_tempBody = $zone;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rectifyZone
     *
     * Rectify the zone data.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function rectifyZone($serverId, $zoneId)
    {
        list($response) = $this->rectifyZoneWithHttpInfo($serverId, $zoneId);
        return $response;
    }

    /**
     * Operation rectifyZoneWithHttpInfo
     *
     * Rectify the zone data.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \insidieux\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function rectifyZoneWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->rectifyZoneRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rectifyZoneAsync
     *
     * Rectify the zone data.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rectifyZoneAsync($serverId, $zoneId)
    {
        return $this->rectifyZoneAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rectifyZoneAsyncWithHttpInfo
     *
     * Rectify the zone data.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rectifyZoneAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = 'string';
        $request = $this->rectifyZoneRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rectifyZone'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function rectifyZoneRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling rectifyZone'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling rectifyZone'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/rectify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->configuration->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->configuration->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->configuration->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->configuration->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->configuration->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->configuration->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->configuration->getDebugFile());
            }
        }

        return $options;
    }
}
